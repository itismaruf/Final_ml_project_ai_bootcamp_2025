# team_comparison.py
import pandas as pd
import streamlit as st
import plotly.graph_objects as go

def render_team_comparison(df: pd.DataFrame):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–ª–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –ø–æ –ª–∏–≥–∞–º."""

    st.subheader("‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –ø–æ –ª–∏–≥–∞–º")

    # --- 1. –í—ã–±–æ—Ä –ª–∏–≥ ---
    leagues = sorted(df["league_name"].dropna().unique())
    col1, col2 = st.columns(2)
    with col1:
        league1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 1", leagues, key="league1")
    with col2:
        league2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–≥—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã 2", leagues, key="league2")

    # --- 2. –í—ã–±–æ—Ä –∫–æ–º–∞–Ω–¥ ---
    teams1 = sorted(df[df["league_name"] == league1]["team_name"].unique()) if league1 else []
    teams2 = sorted(df[df["league_name"] == league2]["team_name"].unique()) if league2 else []

    col3, col4 = st.columns(2)
    with col3:
        team1 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 1", teams1, key="team1_select")
    with col4:
        team2 = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É 2", teams2, key="team2_select")

    # --- 3. –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ---
    if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã"):
        if not team1 or not team2 or team1 == team2:
            st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –¥–≤–µ —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
            return

        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
        team1_data = df[df["team_name"] == team1]
        team2_data = df[df["team_name"] == team2]

        features = [
            "goals_team", "xGoals_team", "shots_team", "shotsOnTarget",
            "deep", "ppda", "fouls", "corners", "yellowCards", "redCards"
        ]
        team1_stats = team1_data[features].mean()
        team2_stats = team2_data[features].mean()

        compare_df = pd.DataFrame({
            "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å": features,
            team1: team1_stats.values,
            team2: team2_stats.values
        })

        # üöÄ –†–∞–¥–∞—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
        fig_radar = go.Figure()
        fig_radar.add_trace(go.Scatterpolar(
            r=team1_stats.values,
            theta=features,
            fill='toself',
            name=team1
        ))
        fig_radar.add_trace(go.Scatterpolar(
            r=team2_stats.values,
            theta=features,
            fill='toself',
            name=team2
        ))
        fig_radar.update_layout(
            polar=dict(radialaxis=dict(visible=True)),
            showlegend=True,
            title=f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥: {team1} vs {team2}"
        )
        st.plotly_chart(fig_radar, use_container_width=True)

        # üìä –¢–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π
        num_cols = compare_df.select_dtypes(include="number").columns
        st.dataframe(compare_df.style.highlight_max(axis=1, subset=num_cols, color="blue"))

        # üìå –î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π –∫–æ–º–∞–Ω–¥ (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        style_counts = (
            df[df["team_name"].isin([team1, team2])]
            .groupby(["team_name", "team_style"])
            .size()
            .reset_index(name="count")
        )

        fig_styles = go.Figure()

        for team in [team1, team2]:
            team_data = style_counts[style_counts["team_name"] == team]
            fig_styles.add_trace(go.Bar(
                x=team_data["team_style"],
                y=team_data["count"],
                name=team,
                text=team_data["count"],
                textposition="auto"
            ))

        fig_styles.update_layout(
            barmode="group",
            title="üìå –ß–∞—Å—Ç–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π",
            xaxis_title="–¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å",
            yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π",
            legend_title="–ö–æ–º–∞–Ω–¥–∞",
            template="plotly_white"
        )

        st.plotly_chart(fig_styles, use_container_width=True)
