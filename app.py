import streamlit as st
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd

from utils.data_exploration import (
    load_data, filter_data, dataset_overview,
    plot_style_distribution, plot_result_distribution,
    plot_feature_correlations, top_teams_by_metric
)

from utils.modeling import run_model_pipeline
from utils.team_comparison import render_team_comparison

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–¥–∏–Ω —Ä–∞–∑
df = load_data("top_5_soccer_leagues_15_20.csv")
df['win'] = (df['result'] == 'W').astype(int)

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Å–∞–π–¥–±–∞—Ä–µ
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª", ["üìä –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –¥–∞–Ω–Ω—ã–º–∏", "ü§ñ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥"])

# ------------------ –°–¢–†–ê–ù–ò–¶–ê 1 ------------------
if page == "üìä –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –¥–∞–Ω–Ω—ã–º–∏":
    st.header("üìä –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –¥–∞–Ω–Ω—ã–º–∏")

    # –§–∏–ª—å—Ç—Ä—ã
    season = st.sidebar.selectbox("–°–µ–∑–æ–Ω", [None] + sorted(df['season'].unique()))
    league = st.sidebar.selectbox("–õ–∏–≥–∞", [None] + sorted(df['league_name'].unique()))

    filtered_df = filter_data(df, season, league)

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = dataset_overview(filtered_df)
    st.write("### –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", stats)

    # –ì—Ä–∞—Ñ–∏–∫–∏
    st.plotly_chart(plot_style_distribution(filtered_df))
    st.plotly_chart(plot_result_distribution(filtered_df))

    with st.expander("üìà –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç—Ä–∏—Ü—É –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π"):
        st.plotly_chart(plot_feature_correlations(filtered_df))

    # –í—ã–±–æ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–æ–ø–∞ –∫–æ–º–∞–Ω–¥
    numeric_columns = [
        'xGoals_team', 'shots_team', 'shotsOnTarget', 'deep', 'ppda',
        'fouls', 'corners', 'yellowCards', 'redCards'
    ]
    selected_metric = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç—Ä–∏–∫—É –¥–ª—è —Ç–æ–ø-5 –∫–æ–º–∞–Ω–¥", numeric_columns)
    st.plotly_chart(top_teams_by_metric(filtered_df, selected_metric, n=5))


# ------------------ –°–¢–†–ê–ù–ò–¶–ê 2 ------------------
if page == "ü§ñ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ":
    st.header("ü§ñ –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")

    # --- –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë —á–µ—Ä–µ–∑ –æ–±—â–∏–π –ø–∞–π–ø–ª–∞–π–Ω ---
    artifacts = run_model_pipeline(None)  # df –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –æ—Ñ–ª–∞–π–Ω-–∑–∞–≥—Ä—É–∑–∫–∞

    model = artifacts["model"]
    metrics = artifacts["metrics"]
    feature_importance_df = artifacts["feature_importance_df"]
    conf_matrix = artifacts["conf_matrix"]
    features = artifacts["features"]
    classes = artifacts["classes"]
    roc_curves = artifacts["roc_curves"]

    # -----------------------
    # 1. –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ö–æ–¥–∞
    # -----------------------
    st.subheader("üìå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥")
    st.info("–ú—ã –ø—Ä–∏–º–µ–Ω–∏–ª–∏ - üå≤ Random Forest\n\n")
    st.markdown("---")

    # -----------------------
    # 2. –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    # -----------------------
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    numeric_metrics = {k: v for k, v in metrics.items() if isinstance(v, (int, float))}
    metrics_df = pd.DataFrame(numeric_metrics.items(), columns=["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–∏–µ"])

    fig_metrics = px.bar(
        metrics_df, x="–ú–µ—Ç—Ä–∏–∫–∞", y="–ó–Ω–∞—á–µ–Ω–∏–µ",
        color="–ó–Ω–∞—á–µ–Ω–∏–µ", text="–ó–Ω–∞—á–µ–Ω–∏–µ",
        color_continuous_scale="Viridis"
    )
    fig_metrics.update_traces(texttemplate='%{text:.3f}', textposition='outside')
    st.plotly_chart(fig_metrics, use_container_width=True)
    st.markdown("---")

    # -----------------------
    # 3. Confusion Matrix
    # -----------------------
    st.subheader("üîç Confusion Matrix")
    if conf_matrix is not None and conf_matrix.size > 0:
        fig_cm = px.imshow(
            conf_matrix, text_auto=True,
            x=classes, y=classes,
            color_continuous_scale="Blues"
        )
        fig_cm.update_layout(
            title="–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫",
            xaxis_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ", yaxis_title="–ò—Å—Ç–∏–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
        )
        st.plotly_chart(fig_cm, use_container_width=True)
    else:
        st.warning("–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    st.markdown("---")

    # -----------------------
    # 4. –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    # -----------------------
    st.subheader("üåü –í–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    fig_imp = px.bar(
        feature_importance_df,
        x="–í–∞–∂–Ω–æ—Å—Ç—å", y="–ü—Ä–∏–∑–Ω–∞–∫",
        orientation="h",
        color="–í–∞–∂–Ω–æ—Å—Ç—å",
        color_continuous_scale="Sunset"
    )
    st.plotly_chart(fig_imp, use_container_width=True)
    st.markdown("---")

    # -----------------------
    # 5. ROC-–∫—Ä–∏–≤—ã–µ
    # -----------------------
    st.subheader("üìà ROC-–∫—Ä–∏–≤—ã–µ (One-vs-Rest)")
    if roc_curves:
        import plotly.graph_objects as go
        fig_roc = go.Figure()
        for cls, data in roc_curves.items():
            fig_roc.add_trace(go.Scatter(
                x=data["fpr"], y=data["tpr"],
                mode="lines",
                name=f"–ö–ª–∞—Å—Å {cls}"
            ))
        fig_roc.add_trace(go.Scatter(
            x=[0, 1], y=[0, 1],
            mode="lines",
            name="–°–ª—É—á–∞–π–Ω–æ–µ —É–≥–∞–¥—ã–≤–∞–Ω–∏–µ",
            line=dict(dash="dash", color="gray")
        ))
        fig_roc.update_layout(
            title="ROC-–∫—Ä–∏–≤—ã–µ –ø–æ –∫–ª–∞—Å—Å–∞–º",
            xaxis_title="False Positive Rate",
            yaxis_title="True Positive Rate",
            legend_title="–ö–ª–∞—Å—Å—ã",
            template="plotly_white"
        )
        st.plotly_chart(fig_roc, use_container_width=True)
    else:
        st.warning("ROC-–∫—Ä–∏–≤—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
    st.markdown("---")

# ------------------ –°–¢–†–ê–ù–ò–¶–ê 1 ------------------
if page == "‚öîÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥":
    render_team_comparison(df)